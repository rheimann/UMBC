2 + 2
The datasets for this lab relate to voting results The United States presidential election of 2004 was the 55th quadrennial presidential election. It was held on Tuesday, November 2, 2004. Republican Party candidate and incumbent President George W. Bush defeated Democratic Party candidate John Kerry, the then-junior Senator from Massachusetts.from the 2004 US presidential election - where Bush beat Kerry. The one which I have labeled 'main' has numbers representing the number of drug related deaths by council area, with most of its columns containing counts that relate to specific drugs. It also contains geographical coordinates of the council areas, in latitude and longitude. The one which I have labeled 'pop' contains population numbers. The rest of the datasets contain numbers relating to problems with crime, education, employment, health, and income. The datasets contain proportions in them, such that values closer to 1 indicate that the council area is more troubled, while values closer to 0 indicate that the council area is less troubled in that particular way.
## Let's plot the % of vote for Bush
data <- election
var <- data$Bush_pct
data <- election
var <- data$Bush_pct
setwd("/Users/heimannrichard/Google Drive/Spatial Analysis UMBC/RCode/spacestats/CodeData")
load("Datasets.RData")
data <- election
var <- data$Bush_pct
var
summary(var)
spplot(data, zcol="Bush_pct", col.regions=br.palette(100), main="Percent of County Vote for Bush (2004)")
br.palette <- colorRampPalette(c("blue", "red"), space = "rgb")
br.palette(5)
spplot(data, zcol="Bush_pct", col.regions=br.palette(100), main="Percent of County Vote for Bush (2004)")
## Fixed intervals
classes_fx <- classIntervals(var, n=5, style="fixed", fixedBreaks=c(0, 10, 25, 50, 75, 100), rtimes = 1)
classes_sd <- classIntervals(var, n=5, style = "sd", rtimes = 1)
classes_fi <- classIntervals(var, n=5, style = "fisher", rtimes = 3)
classes_eq <- classIntervals(var, n=5, style = "equal", rtimes = 1)
classes_km <- classIntervals(var, n=5, style = "kmeans", rtimes = 1)
classes_qt <- classIntervals(var, n=5, style = "quantile", rtimes = 1)
classes_fx
classes_sd
classes_fi
classes_eq
classes_km
classes_qt
library(maps)         ## Projections
library(maptools)     ## Data management
library(sp)           ## Data management
library(spdep)        ## Spatial autocorrelation
library(gstat)        ## Geostatistics
library(splancs)      ## Kernel Density
library(spatstat)     ## Geostatistics
library(pgirmess)     ## Spatial autocorrelation
library(RColorBrewer) ## Visualization
library(classInt)     ## Class intervals
library(spgwr)        ## GWR
## Fixed intervals
classes_fx <- classIntervals(var, n=5, style="fixed", fixedBreaks=c(0, 10, 25, 50, 75, 100), rtimes = 1)
classes_sd <- classIntervals(var, n=5, style = "sd", rtimes = 1)
classes_fi <- classIntervals(var, n=5, style = "fisher", rtimes = 3)
classes_eq <- classIntervals(var, n=5, style = "equal", rtimes = 1)
classes_km <- classIntervals(var, n=5, style = "kmeans", rtimes = 1)
classes_qt <- classIntervals(var, n=5, style = "quantile", rtimes = 1)
classes_fx
classes_sd
classes_fi
classes_eq
classes_km
classes_qt
cols <- findColours(classes_fx, pal)
pal <- br.palette(n=5)
cols <- findColours(classes_fx, pal)
par(mar=rep(0,4))
plot(election,col=cols,border=NA)
legend(x="bottom",cex=.7,fill=attr(cols,"palette"), bty="n",legend=names(attr(cols, "table")),
title="Percent of County Vote for Bush (2004)",ncol=5)
class(cols)
cols
par(mar=rep(0,4))
plot(election,col=cols,border=NA)
legend(x="bottom",cex=.7,fill=c("red","blue"),bty="n",legend=c("Bush","Kerry"),title="Winner of County Vote (2004)",ncol=2)
par(mar=rep(0,4))
plot(election,col=binary.cols,border=NA)
legend(x="bottom",cex=.7,fill=c("red","blue"),bty="n",legend=c("Bush","Kerry"),title="Winner of County Vote (2004)",ncol=2)
binary.cols <- ifelse(data$Bush > data$Kerry,"red","blue")
class(cols)
par(mar=rep(0,4))
plot(election,col=binary.cols,border=NA)
legend(x="bottom",cex=.7,fill=c("red","blue"),bty="n",legend=c("Bush","Kerry"),title="Winner of County Vote (2004)",ncol=2)
moran.test(data$Bush_pct, listw=W_cont_el_mat, zero.policy=T)
W_cont_el <- poly2nb(data, queen=T)
W_cont_el_mat <- nb2listw(W_cont_el, style="W", zero.policy=TRUE)
moran.test(data$Bush_pct, listw=W_cont_el_mat, zero.policy=T)
geary.test(data$Bush_pct, listw=W_cont_el_mat, zero.policy=T)
moran.test(data$POP2000, listw=W_cont_el_mat, zero.policy=T)
## Global Autocorrelation Tests: Moran's I
moran.test(data$Bush_pct, listw=W_cont_el_mat, zero.policy=T)
moran.test(data$Kerry, listw=W_cont_el_mat, zero.policy=T)
moran.test(data$POP2000, listw=W_cont_el_mat, zero.policy=T)
## Global Autocorrelation Tests: Join Count
data$BushWin <- as.factor(ifelse(data$Bush > data$Kerry,1,0))
joincount.multi(data$BushWin, listw=W_cont_el_mat, zero.policy=T)
par(mar=c(4,4,1.5,0.5))
moran.plot(data$Bush_pct, listw=W_cont_el_mat, zero.policy=T, xlim=c(0,100),ylim=c(0,100), pch=16, col="black",cex=.5, quiet=F,
labels=as.character(data$NAME),xlab="Percent for Bush", ylab="Percent for Bush (Spatial Lag)", main="Moran Scatterplot")
mod.lm <- lm(Bush_pct ~ pcincome, data=data)
summary(mod.lm)
res <- mod.lm$residuals
res.palette <- colorRampPalette(c("red","orange","white", "lightgreen","green"), space = "rgb")
pal <- res.palette(5)
classes_fx <- classIntervals(res, n=5, style="fixed", fixedBreaks=c(-50,-25,-5,5,25,50), rtimes = 1)
cols <- findColours(classes_fx,pal)
par(mar=rep(0,4))
plot(data,col=cols, main="Residuals from OLS Model", pretty=T, border="grey")
legend(x="bottom",cex=1,fill=attr(cols,"palette"),bty="n",legend=names(attr(cols, "table")),title="Residuals from OLS Model",ncol=5)
# install.packages("spdep", dependencies=TRUE)
require(spdep)
# install.packages("maptools", repos="http://cran.us.r-project.org")
require(maptools)
# install.packages("RColorBrewer")
require(RColorBrewer)
```
Load data:
```{r}
# load county shapefile
geocnty.fk <- readShapePoly("/Users/heimannrichard/Google Drive/GIS Data/flesch_kincaid/TwitterReadingCNTYJoin.shp",
proj4string=CRS('+proj=longlat +datum=NAD83'))
```
```{r}
# load 3 digit zip shapefile
geozip.fk <- readShapePoly("/Users/heimannrichard/Google Drive/GIS Data/TwitterReading3ZIPJoin.shp",
proj4string=CRS('+proj=longlat +datum=NAD83'))
```
```{r}
# histogram MEANflesch (mean center FleschKincaid) on geocnty
hist(geocnty.fk$MEANflesch)
hist(geocnty.fk$MEANflesch)
hist(geocnty.fk$MEANflecMC)
# histogram MEANflesch (mean center FleschKincaid) on geozip
hist(geozip.fk$MEANflesch)
hist(geozip.fk$MEANflecMC)
spplot(geocnty.fk, "MEANflesch", at=quantile(geocnty.fk$MEANflesch,
p=c(0,.25, .5, .75, 1), na.rm=TRUE),
col.regions=brewer.pal(5, "Reds"),
main="County Level Flesch Kincaid", sub="Flesch Kincaid Index using Twitter")
spplot(geozip.fk, "MEANflesch", at=quantile(geozip.fk$MEANflesch,
p=c(0,.25, .5, .75, 1), na.rm=TRUE),
col.regions=brewer.pal(5, "Reds"),
main="3 digit Zipcode Level Flesch Kincaid", sub="Flesch Kincaid Index using Twitter")
br.palette <- colorRampPalette(c("blue", "red"), space = "rgb")
br.palette(5)
par(mar=rep(0,4))
plot(geozip.fk,col=cols,border=NA)
legend(x="bottom", cex=.7, fill=attr(cols,"palette"), bty="n",legend=names(attr(cols, "table")),
title="Percent of County Vote for Bush (2004)", ncol=5)
pal <- br.palette(n=5)
plot(geozip.fk,col=pal,border=NA)
br.palette <- colorRampPalette(c("blue", "white"), space = "rgb")
pal <- br.palette(n=5)
par(mar=rep(0,4))
plot(geozip.fk,col=pal,border=NA)
br.palette <- colorRampPalette(c("blue", "pink"), space = "rgb")
pal <- br.palette(n=5)
par(mar=rep(0,4))
plot(geozip.fk,col=pal,border=NA)
br.palette <- colorRampPalette(c("blue", "pink"), space = "rgb")
pal <- br.palette(n=5)
par(mar=rep(0,4))
plot(geozip.fk,col=pal,border=NA)
legend(x="bottom", cex=.7, fill=attr(pal,"palette"), bty="n",legend=names(attr(pal, "table")),
title="FK Index using Twitter", ncol=5)
br.palette <- colorRampPalette(c("blue", "pink"), space = "rgb")
pal <- br.palette(n=5)
var <- geozip.fk$MEANflesch
classes_fx <- classIntervals(var, n=5, style="fixed", fixedBreaks=c(0, 10, 25, 50, 75, 100), rtimes = 1)
cols <- findColours(classes_fx, pal)
par(mar=rep(0,4))
plot(geozip.fk,col=pal,border=NA)
legend(x="bottom", cex=.7, fill=attr(pal,"palette"), bty="n",legend=names(attr(pal, "table")),
title="FK Index using Twitter", ncol=5)
legend(x="bottom", cex=.7, fill=attr(pal,"palette"), bty="n",legend=names(attr(cols, "table")),
title="FK Index using Twitter", ncol=5)
legend(x="bottom", cex=.7, fill=attr(cols,"palette"), bty="n",legend=names(attr(cols, "table")),
title="FK Index using Twitter", ncol=5)
nb.cntyfk <- poly2nb(geocnty.fk, queen=T)
summary(nb.cntyfk)
nb.zipfk <- poly2nb(geozip.fk, queen=T)
summary(nb.zipfk)
sw.cntyfk <- nb2listw(neighbours=nb.cntyfk, style="B", zero.policy=TRUE)
plot(geocnty.fk)
plot(sw.cntyfk, coordinates(geo.fk), add=T, col="red")
plot(sw.cntyfk, coordinates(geocnty.fk), add=T, col="red")
moran.mc(x=geocnty.fk$MEANflesch, listw=sw.cntyfk, nsim=499, zero.policy=TRUE)
moran.mc(x=geozip.fk$MEANflesch, listw=sw.zipfk, nsim=499, zero.policy=TRUE)
sw.zipfk <- nb2listw(neighbours=nb.fk, style="B", zero.policy=TRUE)
sw.zipfk <- nb2listw(neighbours=nb.zipfk, style="B", zero.policy=TRUE)
sw.zipfk <- nb2listw(neighbours=nb.zipfk, style="B", zero.policy=TRUE)
plot(geozip.fk)
plot(sw.zipfk, coordinates(geo.fk), add=T, col="red")
```
```{r, fig.height=12, fig.width=14}
moran.mc(x=geocnty.fk$MEANflesch, listw=sw.cntyfk, nsim=499, zero.policy=TRUE)
plot(sp.correlogram(neighbours=nb.cntyfk, var=geocnty.fk$MEANflesch,
order=6, method="I", style="B", zero.policy=TRUE))
local_cnty.mi <- localmoran(x=geocnty.fk$MEANflesch, listw=sw.cntyfk, alternative="two.sided", p.adjust.method="fdr",
zero.policy=TRUE)
local_zip.mi <- localmoran(x=geozip.fk$MEANflesch, listw=sw.zipfk, alternative="two.sided", p.adjust.method="fdr",
zero.policy=TRUE)
```
```{r}
class(local_cnty.mi)
colnames(local_cnty.mi)
summary(local_cnty.mi)
class(local_zip.mi)
colnames(local_zip.mi)
summary(local_zip.mi)
geocnty.fk$lmi <- local.mi[,1]
geocnty.fk$lmi <- local_cnty.mi[,1]
geocnty.fk$lmi.p <- local_cnty.mi[,5]
##
geozip.fk$lmi <- local_zip.mi[,1]
geozip.fk$lmi.p <- local_zip.mi[,5]
geocnty.fk$lmi.p.sig <- as.factor(ifelse(local.mi[,5]<.001,
"Sig p<.001", ifelse(local.mi[,5]<.05,"Sig p<.05", "NS" )))
geocnty.fk$lmi.p.sig <- as.factor(ifelse(local_cnty.mi[,5]<.001, "Sig p<.001", ifelse(local_cnty.mi[,5]<.05,"Sig p<.05", "NS" )))
##
geozip.fk$lmi.p.sig <- as.factor(ifelse(local_zip.mi[,5]<.001, "Sig p<.001", ifelse(local_zip.mi[,5]<.05,"Sig p<.05", "NS" )))
spplot(geocnty.fk, "lmi", at=summary(geocnty.fk$lmi), col.regions=brewer.pal(5, "RdBu"), main="Local Moran's I")
spplot(geozip.fk, "lmi.p.sig", col.regions=c("white", "#E6550D","#FDAE6B"))
spplot(geocnty.fk, "lmi.p.sig", col.regions=c("white", "#E6550D","#FDAE6B"))
par(mar=c(4,4,1.5,0.5))
moran.plot(geocnty.fk$MEANflesch, listw=cntyfk, zero.policy=T, xlim=c(0,100),ylim=c(0,100), pch=16, col="black",cex=.5,     quiet=F, labels=as.character(geocnty.fk$STATE),xlab="FK Index", ylab="FK Index (Spatial Lag)", main="Moran Scatterplot")
par(mar=c(4,4,1.5,0.5))
moran.plot(geocnty.fk$MEANflesch, listw=sw.cntyfk, zero.policy=T, xlim=c(0,100),ylim=c(0,100), pch=16, col="black",cex=.5,     quiet=F, labels=as.character(geocnty.fk$STATE),xlab="FK Index", ylab="FK Index (Spatial Lag)", main="Moran Scatterplot")
View(head(geocnty.fk))
View(head(geozip.fk))
par(mar=c(4,4,1.5,0.5))
moran.plot(geocnty.fk$MEANflesch, listw=sw.cntyfk, zero.policy=T, xlim=c(0,100),ylim=c(0,100), pch=16, col="black",cex=.5,     quiet=F, labels=as.character(geocnty.fk$STATE_NAME),xlab="FK Index", ylab="FK Index (Spatial Lag)", main="Moran Scatterplot")
par(mar=c(4,4,1.5,0.5))
moran.plot(geocnty.fk$MEANflesch, listw=sw.cntyfk, zero.policy=T, pch=16, col="black",cex=.5,     quiet=F, labels=as.character(geocnty.fk$STATE_NAME),xlab="FK Index", ylab="FK Index (Spatial Lag)", main="Moran Scatterplot")
# par(mar=c(4,4,1.5,0.5))
moran.plot(geocnty.fk$MEANflesch, listw=sw.cntyfk, zero.policy=T, xlim=c(0,100),ylim=c(0,100), pch=16, col="black",cex=.5,     quiet=F, labels=as.character(geocnty.fk$STATE_NAME),xlab="FK Index", ylab="FK Index (Spatial Lag)", main="Moran Scatterplot")
# par(mar=c(4,4,1.5,0.5)) xlim=c(0,100),ylim=c(0,100),
moran.plot(geocnty.fk$MEANflesch, listw=sw.cntyfk, zero.policy=T, pch=16, col="black",cex=.5,     quiet=F, labels=as.character(geocnty.fk$STATE_NAME),xlab="FK Index", ylab="FK Index (Spatial Lag)", main="Moran Scatterplot")
# par(mar=c(4,4,1.5,0.5)) xlim=c(0,100),ylim=c(0,100),
moran.plot(geocnty.fk$MEANflesch, listw=sw.cntyfk, zero.policy=T, pch=16, col="black",cex=.5,     quiet=F, labels=as.character(geocnty.fk$NAME),xlab="FK Index", ylab="FK Index (Spatial Lag)", main="Moran Scatterplot")
# par(mar=c(4,4,1.5,0.5))
moran.plot(geocnty.fk$MEANflesch, listw=sw.cntyfk, zero.policy=T, xlim=c(0,100),ylim=c(0,100), pch=16, col="black",cex=.5,     quiet=F, labels=as.character(geocnty.fk$STATE_NAME),xlab="FK Index", ylab="FK Index (Spatial Lag)", main="Moran Scatterplot")
# par(mar=c(4,4,1.5,0.5))
moran.plot(geocnty.fk$MEANflesch, listw=sw.cntyfk, zero.policy=T, xlim=c(100,100),ylim=c(100,100), pch=16, col="black",cex=.5,     quiet=F, labels=as.character(geocnty.fk$STATE_NAME),xlab="FK Index", ylab="FK Index (Spatial Lag)", main="Moran Scatterplot")
summary(geocnty.fk$MEANflesch)
# par(mar=c(4,4,1.5,0.5))
moran.plot(geocnty.fk$MEANflesch, listw=sw.cntyfk, zero.policy=T, xlim=c(0,100),ylim=c(0,100), pch=16, col="black",cex=.5,     quiet=F, labels=as.character(geocnty.fk$STATE_NAME),xlab="FK Index", ylab="FK Index (Spatial Lag)", main="Moran Scatterplot")
# par(mar=c(4,4,1.5,0.5))
moran.plot(geocnty.fk$MEANflesch, listw=sw.cntyfk, zero.policy=T, xlim=c(0,100),ylim=c(-100,100), pch=16, col="black",cex=.5,     quiet=F, labels=as.character(geocnty.fk$STATE_NAME),xlab="FK Index", ylab="FK Index (Spatial Lag)", main="Moran Scatterplot")
# par(mar=c(4,4,1.5,0.5))
moran.plot(geocnty.fk$MEANflesch, listw=sw.cntyfk, zero.policy=T, xlim=c(0,100),ylim=c(-50,100), pch=16, col="black",cex=.5,     quiet=F, labels=as.character(geocnty.fk$STATE_NAME),xlab="FK Index", ylab="FK Index (Spatial Lag)", main="Moran Scatterplot")
par(mar=c(4,4,1.5,0.5))
moran.plot(geocnty.fk$MEANflesch, listw=sw.cntyfk, zero.policy=T, xlim=c(0,100),ylim=c(-50,100), pch=16, col="black",cex=.5,     quiet=F, labels=as.character(geocnty.fk$STATE_NAME),xlab="FK Index", ylab="FK Index (Spatial Lag)", main="Moran Scatterplot")
par(mar=c(4,4,1.5,0.5))
moran.plot(geocnty.fk$MEANflesch, listw=sw.cntyfk, zero.policy=T, pch=16, col="black",cex=.5,     quiet=F, labels=as.character(geocnty.fk$STATE_NAME),xlab="FK Index", ylab="FK Index (Spatial Lag)", main="Moran Scatterplot")
geocnty.fk$sFKmean <- scale(geocnty.fk$MEANflesch)  #save to a new column
geocnty.fk$lag_sFKmean <- lag.listw(sw.cntyfk, geocnty.fk$sFKmean)
# manually make a moran plot standarize variables
geocnty.fk$sFKmean <- scale(geocnty.fk$MEANflesch)  #save to a new column
# create a lagged variable
geocnty.fk$lag_sFKmean <- lag.listw(sw.cntyfk, geocnty.fk$sFKmean)
summary(geocnty.fk$sFKmean)
summary(geocnty.fk$lag_sFKmean)
plot(x = geocnty.fk$sFKmean, y = geocnty.fk$lag_sFKmean, main = " Moran Scatterplot FK")
abline(h = 0, v = 0)
abline(lm(geocnty.fk$lag_sFKmean ~ geocnty.fk$sFKmean), lty = 3, lwd = 4, col = "red")
# check out the outliers click on one or twon and then hit escape (or
# click finish)
identify(geocnty.fk$sFKmean, geocnty.fk$lag_sFKmean, geocnty.fk$STATE_NAME, cex = 0.8)
colnames(geocnty.fk)
geocnty.fk$quad_sig <- NA
geocnty.fk@data[(geocnty$sFKmean >= 0 & geocnty$lag_sFKmean >= 0) & (locm[, 5] <= 0.05), "quad_sig"] <- 1
geocnty.fk@data[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean >= 0) & (locm[, 5] <= 0.05), "quad_sig"] <- 1
geocnty.fk@data[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean >= 0) & (local_cnty.mi[, 5] <= 0.05), "quad_sig"] <- 1
geocnty.fk@data[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean >= 0) & (local_cnty.mi[, 5] <= 0.05), "quad_sig"] <- 1
geocnty.fk@data[(geocnty.fk$sFKmean <= 0 & geocnty.fk$lag_sFKmean <= 0) & (local_cnty.mi[, 5] <= 0.05), "quad_sig"] <- 2
geocnty.fk@data[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean <= 0) & (local_cnty.mi[, 5] <= 0.05), "quad_sig"] <- 3
geocnty.fk@data[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean <= 0) & (local_cnty.mi[, 5] <= 0.05), "quad_sig"] <- 4
geocnty.fk@data[(geocnty.fk$sFKmean <= 0 & geocnty.fk$lag_sFKmean >= 0) & (local_cnty.mi[, 5] <= 0.05), "quad_sig"] <- 5
geocnty.fk@data[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean >= 0) & (local_cnty.mi[,5] <= 0.05), "quad_sig"] <- 1
geocnty.fk$sFKmean >= 0
geocnty.fk$lag_sFKmean >= 0
local_cnty.mi[,5] <= 0.05
geocnty.fk$lag_sFKmean >= 0
local_cnty.mi[,5] <= 0.05
geocnty.fk$lmi.p <= 0.05
geocnty.fk@data[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean >= 0) & (geocnty.fk$lmi.p <= 0.05), "quad_sig"] <- 1
geocnty.fk@data[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean >= 0)] <- 1
geocnty.fk$lisa[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean >= 0)] <- 1
geocnty.fk$lisa[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean >= 0) & (geocnty.fk$lmi.p <= 0.05), "quad_sig"] <- 1
geocnty.fk$lisa[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean >= 0) <- 1
geocnty.fk$lisa[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean >= 0)] <- 1
geocnty.fk$lisa[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean >= 0) & (local_cnty.mi[,5] <= 0.05), "quad_sig"] <- 1
geocnty.fk$quad_sig <- NA
geocnty.fk
geocnty.fk@data
geocnty.fk@data[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean >= 0) & (local_cnty.mi[,5] <= 0.05), "quad_sig"] <- 1
geocnty.fk@data[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean >= 0) "quad_sig"] <- 1
geocnty.fk@data[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean >= 0)] <- 1
geocnty.fk@data$quad_sig[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean >= 0) & (local_cnty.mi[,5] <= 0.05)] <- 1
geocnty.fk@data$quad_sig[(geocnty.fk$sFKmean <= 0 & geocnty.fk$lag_sFKmean <= 0) & (local_cnty.mi[,5] <= 0.05)] <- 2
geocnty.fk@data
geocnty.fk@data$quad_sig[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean >= 0) & (local_cnty.mi[,5] <= 0.05)] <- 1
geocnty.fk@data$quad_sig[(geocnty.fk$sFKmean <= 0 & geocnty.fk$lag_sFKmean <= 0) & (local_cnty.mi[,5] <= 0.05)] <- 2
geocnty.fk@data$quad_sig[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean <= 0) & (local_cnty.mi[,5] <= 0.05)] <- 3
geocnty.fk@data$quad_sig[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean <= 0) & (local_cnty.mi[,5] <= 0.05)] <- 4
geocnty.fk@data$quad_sig[(geocnty.fk$sFKmean <= 0 & geocnty.fk$lag_sFKmean >= 0) & (local_cnty.mi[,5] <= 0.05)] <- 5  #WE ASSIGN A 5 TO ALL NON-SIGNIFICANT OBSERVATIONS
geocnty.fk@data
geocnty.fk@data$quad_sig[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean >= 0) & (local_cnty.mi[,5] <= 0.05)] <- 1
geocnty.fk@data
geocnty.fk@data$quad_sig[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean >= 0) & (local_cnty.mi <= 0.05)] <- 1
geocnty.fk@data$quad_sig[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean >= 0) & (geocnty.fk$lmi.p <= 0.05)] <- 1
geocnty.fk@data
geocnty.fk@data$quad_sig[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean >= 0) & (geocnty.fk$lmi.p <= 0.05)] <- 1
geocnty.fk@data$quad_sig[(geocnty.fk$sFKmean <= 0 & geocnty.fk$lag_sFKmean >= 0) & (geocnty.fk$lmi.p <= 0.05)] <- 2
geocnty.fk@data$quad_sig[(geocnty.fk$sFKmean <= 0 & geocnty.fk$lag_sFKmean >= 0) & (geocnty.fk$lmi.p <= 0.05)] <- 3
geocnty.fk@data$quad_sig[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean <= 0) & (geocnty.fk$lmi.p <= 0.05)] <- 4
geocnty.fk@data$quad_sig[(geocnty.fk$sFKmean <= 0 & geocnty.fk$lag_sFKmean >= 0) & (geocnty.fk$lmi.p >= 0.05)] <- 5  #WE ASSIGN A 5 TO ALL NON-SIGNIFICANT OBSERVATIONS
geocnty.fk@data
geocnty.fk@data$quad_sig[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean >= 0) & (geocnty.fk$lmi.p.sig == "Sig p<.05)] <- 1
geocnty.fk@data$quad_sig[(geocnty.fk$sFKmean <= 0 & geocnty.fk$lag_sFKmean >= 0) & (geocnty.fk$lmi.p <= .05)] <- 2
geocnty.fk@data$quad_sig[(geocnty.fk$sFKmean >= 0 & geocnty.fk$lag_sFKmean >= 0) & (geocnty.fk$lmi.p.sig == "Sig p<.05")] <- 1
geocnty.fk@data
geocnty.fk@data$quad_sig[(geocnty.fk$lmi.p >= .05)] <- 5  #WE ASSIGN A 5 TO ALL NON-SIGNIFICANT OBSERVATIONS
geocnty.fk@data
par(mar=rep(0,4))
plot(geocnty.fk,col=pal,border=NA)
legend(x="bottom", cex=.7, fill=attr(cols,"palette"), bty="n",legend=names(attr(cols, "table")),
title="3 digit Zipcode Level Flesch Kincaid", ncol=5)
breaks <- seq(1, 5, 1)
# Set the corresponding labels for the thematic map classes
labels <- c("high-High", "low-Low", "High-Low", "Low-High", "Not Signif.")
# see ?findInterval - This is necessary for making a map
np <- findInterval(soco$quad_sig, breaks)
np <- findInterval(geocnty.fk$quad_sig, breaks)
# Assign colors to each map class
colors <- c("red", "blue", "lightpink", "skyblue2", "white")
plot(geocnty.fk, col = colors[np])  #colors[np] manually sets the color for each county
mtext("Local Moran's I", cex = 1.5, side = 3, line = 1)
legend("topleft", legend = labels, fill = colors, bty = "n")
# Set the breaks for the thematic map classes
breaks <- seq(1, 5, 1)
# Set the corresponding labels for the thematic map classes
labels <- c("high-High", "low-Low", "High-Low", "Low-High", "Not Signif.")
# see ?findInterval - This is necessary for making a map
np <- findInterval(geocnty.fk$quad_sig, breaks)
# Assign colors to each map class
colors <- c("red", "blue", "lightpink", "skyblue2", "white")
plot(geocnty.fk, col = colors[np])  #colors[np] manually sets the color for each county
mtext("Local Moran's I", cex = 1.5, side = 3, line = 1)
legend("topleft", legend = labels, fill = colors, bty = "n")
# Set the breaks for the thematic map classes
breaks <- seq(1, 5, 1)
# Set the corresponding labels for the thematic map classes
labels <- c("high-High", "low-Low", "High-Low", "Low-High", "Not Signif.")
# see ?findInterval - This is necessary for making a map
np <- findInterval(geocnty.fk$quad_sig, breaks)
# Assign colors to each map class
colors <- c("red", "blue", "lightpink", "skyblue2", "white")
plot(geocnty.fk, col = colors[np])  #colors[np] manually sets the color for each county
mtext("Local Moran's I", cex = 1.5, side = 3, line = 1)
legend("topleft", legend = labels, fill = colors, bty = "n")
# Set the breaks for the thematic map classes
breaks <- seq(1, 5, 1)
# Set the corresponding labels for the thematic map classes
labels <- c("high-High", "low-Low", "High-Low", "Low-High", "Not Signif.")
# see ?findInterval - This is necessary for making a map
np <- findInterval(geocnty.fk$quad_sig, breaks)
# Assign colors to each map class
colors <- c("red", "blue", "lightpink", "skyblue2", "white")
plot(geocnty.fk, col = colors[np])  #colors[np] manually sets the color for each county
mtext("Local Moran's I", cex = 1.5, side = 3, line = 1)
legend("topleft", legend = labels, fill = colors, bty = "n")
# Set the breaks for the thematic map classes
breaks2 <- seq(1, 5, 1)
# Set the corresponding labels for the thematic map classes
labels2 <- c("high-High", "low-Low", "High-Low", "Low-High", "Not Signif.")
# see ?findInterval - This is necessary for making a map
np2 <- findInterval(geozip.fk$quad_sig, breaks2)
# Assign colors to each map class
colors2 <- c("red", "blue", "lightpink", "skyblue2", "white")
#colors[np] manually sets the color for each county
plot(geozip.fk, col = colors2[np2])
mtext("Local Moran's I", cex = 1.5, side = 3, line = 1)
legend("topleft", legend = labels, fill = colors, bty = "n")
# Set the breaks for the thematic map classes
breaks2 <- seq(1, 5, 1)
# Set the corresponding labels for the thematic map classes
labels2 <- c("high-High", "low-Low", "High-Low", "Low-High", "Not Signif.")
# see ?findInterval - This is necessary for making a map
np2 <- findInterval(geozip.fk$quad_sig, breaks2)
# Assign colors to each map class
colors2 <- c("red", "blue", "lightpink", "skyblue2", "white")
#colors[np] manually sets the color for each county
plot(geozip.fk, col = colors2[np2])
mtext("Local Moran's I", cex = 1.5, side = 5, line = 1)
legend("topleft", legend = labels, fill = colors, bty = "n")
# Set the breaks for the thematic map classes
breaks2 <- seq(1, 5, 1)
# Set the corresponding labels for the thematic map classes
labels2 <- c("high-High", "low-Low", "High-Low", "Low-High", "Not Signif.")
# see ?findInterval - This is necessary for making a map
np2 <- findInterval(geozip.fk$quad_sig, breaks2)
# Assign colors to each map class
colors2 <- c("red", "blue", "lightpink", "skyblue2", "white")
#colors[np] manually sets the color for each county
plot(geozip.fk, col = colors2[np2])
mtext("Local Moran's I", cex = 1.5, side = 5, line = 5)
legend("topleft", legend = labels, fill = colors, bty = "n")
# Set the breaks for the thematic map classes
breaks2 <- seq(1, 5, 1)
# Set the corresponding labels for the thematic map classes
labels2 <- c("high-High", "low-Low", "High-Low", "Low-High", "Not Signif.")
# see ?findInterval - This is necessary for making a map
np2 <- findInterval(geozip.fk$quad_sig, breaks2)
# Assign colors to each map class
colors2 <- c("red", "blue", "lightpink", "skyblue2", "white")
#colors[np] manually sets the color for each county
plot(geozip.fk, col = colors2[np2])
mtext("Local Moran's I", cex = 1.5, side = 20, line = 1)
legend("topleft", legend = labels, fill = colors, bty = "n")
# Set the breaks for the thematic map classes
breaks2 <- seq(1, 5, 1)
# Set the corresponding labels for the thematic map classes
labels2 <- c("high-High", "low-Low", "High-Low", "Low-High", "Not Signif.")
# see ?findInterval - This is necessary for making a map
np2 <- findInterval(geozip.fk$quad_sig, breaks2)
# Assign colors to each map class
colors2 <- c("red", "blue", "lightpink", "skyblue2", "white")
#colors[np] manually sets the color for each county
plot(geozip.fk, col = colors2[np2])
mtext("Local Moran's I", cex = 1.5, side = 20, line = 20)
legend("topleft", legend = labels, fill = colors, bty = "n")
# Set the breaks for the thematic map classes
breaks2 <- seq(1, 5, 1)
# Set the corresponding labels for the thematic map classes
labels2 <- c("high-High", "low-Low", "High-Low", "Low-High", "Not Signif.")
# see ?findInterval - This is necessary for making a map
np2 <- findInterval(geozip.fk$quad_sig, breaks2)
# Assign colors to each map class
colors2 <- c("red", "blue", "lightpink", "skyblue2", "white")
#colors[np] manually sets the color for each county
plot(geozip.fk, col = colors2[np2])
mtext("Local Moran's I", cex = 1.5, side = 50, line = 50)
legend("topleft", legend = labels, fill = colors, bty = "n")
# Set the breaks for the thematic map classes
breaks2 <- seq(1, 5, 1)
# Set the corresponding labels for the thematic map classes
labels2 <- c("high-High", "low-Low", "High-Low", "Low-High", "Not Signif.")
# see ?findInterval - This is necessary for making a map
np2 <- findInterval(geozip.fk$quad_sig, breaks2)
# Assign colors to each map class
colors2 <- c("red", "blue", "lightpink", "skyblue2", "white")
#colors[np] manually sets the color for each county
plot(geozip.fk, col = colors2[np2])
mtext("Local Moran's I", cex = 1.5, side = -50, line = 1)
legend("topleft", legend = labels, fill = colors, bty = "n")
# identify the moran plot quadrant for each observation
geozip.fk$quad_sig <- NA
geozip.fk@data$quad_sig[(geozip.fk$sFKmean >= 0 & geozip.fk$lag_sFKmean >= 0) & (geozip.fk$lmi.p.sig == "Sig p<.05")] <- 1
geozip.fk@data$quad_sig[(geozip.fk$sFKmean <= 0 & geozip.fk$lag_sFKmean >= 0) & (geozip.fk$lmi.p <= .05)] <- 2
geozip.fk@data$quad_sig[(geozip.fk$sFKmean <= 0 & geozip.fk$lag_sFKmean >= 0) & (geozip.fk$lmi.p <= .05)] <- 3
geozip.fk@data$quad_sig[(geozip.fk$sFKmean >= 0 & geozip.fk$lag_sFKmean <= 0) & (geozip.fk$lmi.p <= .05)] <- 4
geozip.fk@data$quad_sig[(geozip.fk$lmi.p >= .05)] <- 5  #WE ASSIGN A 5 TO ALL NON-SIGNIFICANT OBSERVATIONS
# Set the breaks for the thematic map classes
breaks2 <- seq(1, 5, 1)
# Set the corresponding labels for the thematic map classes
labels2 <- c("high-High", "low-Low", "High-Low", "Low-High", "Not Signif.")
# see ?findInterval - This is necessary for making a map
np2 <- findInterval(geozip.fk$quad_sig, breaks2)
# Assign colors to each map class
colors2 <- c("red", "blue", "lightpink", "skyblue2", "white")
#colors[np] manually sets the color for each county
plot(geozip.fk, col = colors2[np2])
mtext("Local Moran's I", cex = 1.5, side = 20, line = 1)
legend("topleft", legend = labels, fill = colors, bty = "n")
geozip.fk@data$quad.sig
geozip.fk$quad.sig
geozip.fk
geocnty.fk@data
geozip.fk@data
# manually make a moran plot standarize variables
# save to a new column
geozip.fk$sFKmean <- scale(geozip.fk$MEANflesch)
# create a lagged variable
geozip.fk$lag_sFKmean <- lag.listw(sw.zipfk, geozip.fk$sFKmean)
summary(geocnty.fk$sFKmean)
summary(geocnty.fk$lag_sFKmean)
plot(x = geozip.fk$sFKmean, y = geozip.fk$lag_sFKmean, main = " Moran Scatterplot FK")
abline(h = 0, v = 0)
abline(lm(geozip.fk$lag_sFKmean ~ geozip.fk$sFKmean), lty = 3, lwd = 4, col = "red")
# check out the outliers click on one or twon and then hit escape (or
# click finish)
identify(geozip.fk$sFKmean, geozip.fk$lag_sFKmean, geozip.fk$STATE_NAME, cex = 0.8)
plot(x = geozip.fk$sFKmean, y = geozip.fk$lag_sFKmean, main = " Moran Scatterplot FK")
abline(h = 0, v = 0)
abline(lm(geozip.fk$lag_sFKmean ~ geozip.fk$sFKmean), lty = 3, lwd = 4, col = "red")
# check out the outliers click on one or twon and then hit escape (or
# click finish)
identify(geozip.fk$sFKmean, geozip.fk$lag_sFKmean, geozip.fk$STATE, cex = 0.8)
# identify the moran plot quadrant for each observation
geozip.fk$quad_sig <- NA
geozip.fk@data$quad_sig[(geozip.fk$sFKmean >= 0 & geozip.fk$lag_sFKmean >= 0) & (geozip.fk$lmi.p.sig == "Sig p<.05")] <- 1
geozip.fk@data$quad_sig[(geozip.fk$sFKmean <= 0 & geozip.fk$lag_sFKmean >= 0) & (geozip.fk$lmi.p <= .05)] <- 2
geozip.fk@data$quad_sig[(geozip.fk$sFKmean <= 0 & geozip.fk$lag_sFKmean >= 0) & (geozip.fk$lmi.p <= .05)] <- 3
geozip.fk@data$quad_sig[(geozip.fk$sFKmean >= 0 & geozip.fk$lag_sFKmean <= 0) & (geozip.fk$lmi.p <= .05)] <- 4
geozip.fk@data$quad_sig[(geozip.fk$lmi.p >= .05)] <- 5  #WE ASSIGN A 5 TO ALL NON-SIGNIFICANT OBSERVATIONS
geozip.fk
geozip.fk@data
# Set the breaks for the thematic map classes
breaks2 <- seq(1, 5, 1)
# Set the corresponding labels for the thematic map classes
labels2 <- c("high-High", "low-Low", "High-Low", "Low-High", "Not Signif.")
# see ?findInterval - This is necessary for making a map
np2 <- findInterval(geozip.fk$quad_sig, breaks2)
# Assign colors to each map class
colors2 <- c("red", "blue", "lightpink", "skyblue2", "white")
#colors[np] manually sets the color for each county
plot(geozip.fk, col = colors2[np2])
mtext("Local Moran's I", cex = 1.5, side = 20, line = 1)
legend("topleft", legend = labels, fill = colors, bty = "n")
